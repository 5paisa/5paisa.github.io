{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"5paisa Python SDK Python SDK for 5paisa APIs natively written in VB .NET Features Order placement, modification and cancellation Fetching user info including holdings, positions, margin and order book. Fetching order status and trade information.","title":"Home"},{"location":"#5paisa-python-sdk","text":"Python SDK for 5paisa APIs natively written in VB .NET","title":"5paisa Python SDK"},{"location":"#features","text":"Order placement, modification and cancellation Fetching user info including holdings, positions, margin and order book. Fetching order status and trade information.","title":"Features"},{"location":"installation/","text":"Installation pip install py5paisa","title":"Installation"},{"location":"installation/#installation","text":"pip install py5paisa","title":"Installation"},{"location":"usage/auth/","text":"Authentication Configuring API keys Get your API keys from here Configure these keys in a file named keys.conf in the same directory as your python script exists A sample keys.conf is given below: [KEYS] APP_NAME = YOUR_APP_NAME_HERE APP_SOURCE = YOUR_APP_SOURCE_HERE USER_ID = YOUR_USER_ID_HERE PASSWORD = YOUR_PASSWORD_HERE USER_KEY = YOUR_USER_KEY_HERE ENCRYPTION_KEY = YOUR_ENCRYPTION_KEY_HERE Login from py5paisa import FivePaisaClient client = FivePaisaClient ( email = \"random_email@xyz.com\" , passwd = \"password\" , dob = \"YYYYMMDD\" ) client . login () After successful authentication, you should get a Logged in!! message.","title":"Authentication"},{"location":"usage/auth/#authentication","text":"","title":"Authentication"},{"location":"usage/auth/#configuring-api-keys","text":"Get your API keys from here Configure these keys in a file named keys.conf in the same directory as your python script exists A sample keys.conf is given below: [KEYS] APP_NAME = YOUR_APP_NAME_HERE APP_SOURCE = YOUR_APP_SOURCE_HERE USER_ID = YOUR_USER_ID_HERE PASSWORD = YOUR_PASSWORD_HERE USER_KEY = YOUR_USER_KEY_HERE ENCRYPTION_KEY = YOUR_ENCRYPTION_KEY_HERE","title":"Configuring API keys"},{"location":"usage/auth/#login","text":"from py5paisa import FivePaisaClient client = FivePaisaClient ( email = \"random_email@xyz.com\" , passwd = \"password\" , dob = \"YYYYMMDD\" ) client . login () After successful authentication, you should get a Logged in!! message.","title":"Login"},{"location":"usage/cancel/","text":"Canceling an order client . cancel_order ( exch_order_id = \"12345678\" , traded_qty = 10 , scrip_code = 11111 )","title":"Canceling an order"},{"location":"usage/cancel/#canceling-an-order","text":"client . cancel_order ( exch_order_id = \"12345678\" , traded_qty = 10 , scrip_code = 11111 )","title":"Canceling an order"},{"location":"usage/info/","text":"Information User information # Fetches holdings client . holdings () # Fetches margin client . margin () # Fetches positions client . positions () # Fetches the order book of the client client . order_book () Order Status and Trade Information from py5paisa.order import OrderForStatus , Exchange , ExchangeType , RequestList test_order_status = OrderForStatus ( exchange = Exchange . BSE , exchange_type = ExchangeType . CASH , scrip_code = 500875 , order_id = 0 ) req_list = RequestList () # Add multiple orders to the RequestList to know status of multiple orders at once. req_list . add_order ( test_order_status ) # Fetches the trade details client . fetch_trade_info ( req_list ) # Fetches the order status client . fetch_order_status ( req_list )","title":"Fetching information"},{"location":"usage/info/#information","text":"","title":"Information"},{"location":"usage/info/#user-information","text":"# Fetches holdings client . holdings () # Fetches margin client . margin () # Fetches positions client . positions () # Fetches the order book of the client client . order_book ()","title":"User information"},{"location":"usage/info/#order-status-and-trade-information","text":"from py5paisa.order import OrderForStatus , Exchange , ExchangeType , RequestList test_order_status = OrderForStatus ( exchange = Exchange . BSE , exchange_type = ExchangeType . CASH , scrip_code = 500875 , order_id = 0 ) req_list = RequestList () # Add multiple orders to the RequestList to know status of multiple orders at once. req_list . add_order ( test_order_status ) # Fetches the trade details client . fetch_trade_info ( req_list ) # Fetches the order status client . fetch_order_status ( req_list )","title":"Order Status and Trade Information"},{"location":"usage/modify/","text":"Modifying an order client . modify_order ( exch_order_id = \"12345678\" , traded_qty = 10 , scrip_code = 11111 )","title":"Modiying an order"},{"location":"usage/modify/#modifying-an-order","text":"client . modify_order ( exch_order_id = \"12345678\" , traded_qty = 10 , scrip_code = 11111 )","title":"Modifying an order"},{"location":"usage/place/","text":"Placing an order # Note: This is an indicative order. from py5paisa.order import Order , OrderType test_order = Order ( order_type = OrderType . BUY , scrip_code = 11111 , quantity = 10 , price = 123.0 ) client . place_order ( test_order ) Detailed Usage Placing an intraday order By default orders are delivery, to place an intraday order, pass is_intraday=True from py5paisa.order import Order , OrderType test_order = Order ( order_type = OrderType . BUY , scrip_code = 11111 , quantity = 10 , is_intraday = True , price = 123.0 ) client . place_order ( test_order ) Placing a stoploss order By default orders are regular, to place a stoploss order, pass is_stoploss_order=True and stoploss_price which is the trigger price for your order. stoploss_price is a float and for Buy Stop loss, Trigger price should not be greater than Limit Price. And for Sell Stop Loss Order Trigger Price should not be less than Limit Price. from py5paisa.order import Order , OrderType test_order = Order ( order_type = OrderType . BUY , scrip_code = 11111 , quantity = 10 , is_stoploss = True , stoploss_price = 123.0 ) client . place_order ( test_order ) Placing offline orders By default all orders are normal orders, pass ahplaced=AHPlaced.AFTER_MARKET_CLOSED to place offline orders. from py5paisa.order import Order , OrderType , AHPlaced test_order = Order ( order_type = OrderType . BUY , scrip_code = 11111 , quantity = 10 , ahplaced = AHPlaced . AFTER_MARKET_CLOSED ) client . place_order ( test_order ) Enums Following are the enums which can be imported and used for placing more complex orders. class Exchange ( Enum ): NSE = \"N\" BSE = \"B\" MCX = \"M\" class ExchangeSegment ( Enum ): CASH = \"C\" DERIVATIVE = \"D\" CURRENCY = \"U\" class OrderType ( Enum ): BUY = \"BUY\" SELL = \"SELL\" class OrderValidity ( Enum ): DAY = 0 GTD = 1 GTC = 2 IOC = 3 EOS = 4 FOK = 6 class AHPlaced ( Enum ): AFTER_MARKET_CLOSED = \"Y\" NORMAL_ORDER = \"N\" Source","title":"Placing an order"},{"location":"usage/place/#placing-an-order","text":"# Note: This is an indicative order. from py5paisa.order import Order , OrderType test_order = Order ( order_type = OrderType . BUY , scrip_code = 11111 , quantity = 10 , price = 123.0 ) client . place_order ( test_order )","title":"Placing an order"},{"location":"usage/place/#detailed-usage","text":"","title":"Detailed Usage"},{"location":"usage/place/#placing-an-intraday-order","text":"By default orders are delivery, to place an intraday order, pass is_intraday=True from py5paisa.order import Order , OrderType test_order = Order ( order_type = OrderType . BUY , scrip_code = 11111 , quantity = 10 , is_intraday = True , price = 123.0 ) client . place_order ( test_order )","title":"Placing an intraday order"},{"location":"usage/place/#placing-a-stoploss-order","text":"By default orders are regular, to place a stoploss order, pass is_stoploss_order=True and stoploss_price which is the trigger price for your order. stoploss_price is a float and for Buy Stop loss, Trigger price should not be greater than Limit Price. And for Sell Stop Loss Order Trigger Price should not be less than Limit Price. from py5paisa.order import Order , OrderType test_order = Order ( order_type = OrderType . BUY , scrip_code = 11111 , quantity = 10 , is_stoploss = True , stoploss_price = 123.0 ) client . place_order ( test_order )","title":"Placing a stoploss order"},{"location":"usage/place/#placing-offline-orders","text":"By default all orders are normal orders, pass ahplaced=AHPlaced.AFTER_MARKET_CLOSED to place offline orders. from py5paisa.order import Order , OrderType , AHPlaced test_order = Order ( order_type = OrderType . BUY , scrip_code = 11111 , quantity = 10 , ahplaced = AHPlaced . AFTER_MARKET_CLOSED ) client . place_order ( test_order )","title":"Placing offline orders"},{"location":"usage/place/#enums","text":"Following are the enums which can be imported and used for placing more complex orders. class Exchange ( Enum ): NSE = \"N\" BSE = \"B\" MCX = \"M\" class ExchangeSegment ( Enum ): CASH = \"C\" DERIVATIVE = \"D\" CURRENCY = \"U\" class OrderType ( Enum ): BUY = \"BUY\" SELL = \"SELL\" class OrderValidity ( Enum ): DAY = 0 GTD = 1 GTC = 2 IOC = 3 EOS = 4 FOK = 6 class AHPlaced ( Enum ): AFTER_MARKET_CLOSED = \"Y\" NORMAL_ORDER = \"N\" Source","title":"Enums"}]}